name: Deploy to Server

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ducksnet-bot

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: |
          poetry run python -m pytest tests/ || echo "No tests found, skipping"

      - name: Lint code
        run: |
          poetry run flake8 app/ || echo "No flake8 config, skipping"
          poetry run black --check app/ || echo "No black config, skipping"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e
            echo "üöÄ Starting deployment..."

            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            cd /opt/ducksnet

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "‚èπÔ∏è Stopping containers..."
            docker-compose down || true

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
            echo "üì• Updating code..."
            git fetch origin
            git reset --hard origin/main

            # –°–æ–∑–¥–∞–Ω–∏–µ .env –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            echo "‚öôÔ∏è Checking environment files..."
            if [ ! -f .env ]; then
              cp env.example .env
              echo "‚ö†Ô∏è Created .env from example - please configure it!"
            fi

            # –°–æ–∑–¥–∞–Ω–∏–µ plans.json –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if [ ! -f plans.json ]; then
              cp plans.example.json plans.json 2>/dev/null || echo '{"durations": [30, 60, 180, 365], "plans": [{"devices": 1, "prices": {"RUB": {"30": 100, "60": 180, "180": 450, "365": 800}}}]}' > plans.json
            fi

            # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "üöÄ Starting containers..."
            docker-compose up -d --build

            # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "‚è≥ Waiting for services to be ready..."
            sleep 30

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            echo "üîç Checking service status..."
            docker-compose ps

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
            echo "üßπ Cleaning up old images..."
            docker system prune -f

            echo "‚úÖ Deployment completed successfully!"
