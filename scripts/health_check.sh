#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤ ducksnet
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -eq 0 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <environment>"
    echo "Environments:"
    echo "  production  - –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä"
    echo "  staging     - –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä"
    exit 1
fi

ENVIRONMENT=$1

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_DIR="/opt/ducksnet"
if [ "$ENVIRONMENT" = "staging" ]; then
    PROJECT_DIR="/opt/ducksnet-staging"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -d "$PROJECT_DIR" ]; then
    error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $PROJECT_DIR"
    exit 1
fi

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$PROJECT_DIR"

log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏: $ENVIRONMENT"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    error "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    error "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

info "‚úÖ Docker –∏ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
if docker-compose ps | grep -q "Up"; then
    info "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
    docker-compose ps
else
    error "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
    docker-compose ps
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
log "ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞..."
if docker-compose exec -T bot curl -f http://localhost:8080/health 2>/dev/null; then
    info "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    warning "‚ö†Ô∏è –ë–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤ (health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
log "üî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis..."
if docker-compose exec -T redis redis-cli --raw incr ping 2>/dev/null > /dev/null; then
    info "‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ Redis
    MEMORY_INFO=$(docker-compose exec -T redis redis-cli info memory 2>/dev/null | grep "used_memory_human\|maxmemory_human" || echo "")
    if [ -n "$MEMORY_INFO" ]; then
        info "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ Redis:"
        echo "$MEMORY_INFO" | sed 's/^/  /'
    fi
else
    error "‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Traefik
log "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Traefik..."
if docker-compose exec -T traefik traefik version 2>/dev/null; then
    info "‚úÖ Traefik —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    CONFIG_CHECK=$(docker-compose exec -T traefik traefik version 2>/dev/null | head -1 || echo "")
    info "üìã –í–µ—Ä—Å–∏—è Traefik: $CONFIG_CHECK"
else
    error "‚ùå Traefik –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
log "üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
if docker-compose exec -T bot test -f /app/db/database.db 2>/dev/null; then
    info "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
    if docker-compose exec -T bot alembic current 2>/dev/null; then
        info "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    else
        warning "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏"
    fi
else
    warning "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
log "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π..."
NETWORK_INFO=$(docker network inspect ducksnet-network 2>/dev/null | grep -E '"Name"|"IPv4Address"' || echo "")
if [ -n "$NETWORK_INFO" ]; then
    info "‚úÖ Docker —Å–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
else
    warning "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å Docker —Å–µ—Ç—å—é"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
log "üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤..."
PORTS_STATUS=""
if netstat -tulpn 2>/dev/null | grep -q ":80 "; then
    PORTS_STATUS="$PORTS_STATUS 80(HTTP)‚úÖ"
else
    PORTS_STATUS="$PORTS_STATUS 80(HTTP)‚ùå"
fi

if netstat -tulpn 2>/dev/null | grep -q ":443 "; then
    PORTS_STATUS="$PORTS_STATUS 443(HTTPS)‚úÖ"
else
    PORTS_STATUS="$PORTS_STATUS 443(HTTPS)‚ùå"
fi

if netstat -tulpn 2>/dev/null | grep -q ":22 "; then
    PORTS_STATUS="$PORTS_STATUS 22(SSH)‚úÖ"
else
    PORTS_STATUS="$PORTS_STATUS 22(SSH)‚ùå"
fi

info "üì° –°—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–æ–≤:$PORTS_STATUS"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
log "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
if [ -d "/opt/ducksnet/letsencrypt_data" ] || [ -d "/opt/ducksnet-staging/letsencrypt_data" ]; then
    info "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Let's Encrypt —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    CERT_FILES=$(find /opt/ducksnet* -name "*.crt" -o -name "*.pem" 2>/dev/null | head -5)
    if [ -n "$CERT_FILES" ]; then
        info "üìú –ù–∞–π–¥–µ–Ω—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:"
        echo "$CERT_FILES" | sed 's/^/  /'
    fi
else
    warning "‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Let's Encrypt –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
log "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏..."
ERROR_COUNT=0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –±–æ—Ç–∞
BOT_ERRORS=$(docker-compose logs --tail=100 bot 2>/dev/null | grep -i "error\|exception\|traceback" | wc -l)
if [ "$BOT_ERRORS" -gt 0 ]; then
    warning "‚ö†Ô∏è –í –ª–æ–≥–∞—Ö –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω–æ $BOT_ERRORS –æ—à–∏–±–æ–∫"
    ERROR_COUNT=$((ERROR_COUNT + BOT_ERRORS))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ Traefik
TRAEFIK_ERRORS=$(docker-compose logs --tail=100 traefik 2>/dev/null | grep -i "error\|exception" | wc -l)
if [ "$TRAEFIK_ERRORS" -gt 0 ]; then
    warning "‚ö†Ô∏è –í –ª–æ–≥–∞—Ö Traefik –Ω–∞–π–¥–µ–Ω–æ $TRAEFIK_ERRORS –æ—à–∏–±–æ–∫"
    ERROR_COUNT=$((ERROR_COUNT + TRAEFIK_ERRORS))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ Redis
REDIS_ERRORS=$(docker-compose logs --tail=100 redis 2>/dev/null | grep -i "error\|exception" | wc -l)
if [ "$REDIS_ERRORS" -gt 0 ]; then
    warning "‚ö†Ô∏è –í –ª–æ–≥–∞—Ö Redis –Ω–∞–π–¥–µ–Ω–æ $REDIS_ERRORS –æ—à–∏–±–æ–∫"
    ERROR_COUNT=$((ERROR_COUNT + REDIS_ERRORS))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
log "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤..."
RESOURCE_INFO=$(docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" 2>/dev/null || echo "")
if [ -n "$RESOURCE_INFO" ]; then
    info "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    echo "$RESOURCE_INFO"
else
    warning "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
log "üíø –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
DISK_INFO=$(df -h /opt 2>/dev/null | tail -1 || echo "")
if [ -n "$DISK_INFO" ]; then
    USAGE=$(echo "$DISK_INFO" | awk '{print $5}' | sed 's/%//')
    if [ "$USAGE" -gt 80 ]; then
        warning "‚ö†Ô∏è –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ $USAGE%"
    else
        info "‚úÖ –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ $USAGE%"
    fi
    info "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ:"
    echo "$DISK_INFO" | sed 's/^/  /'
fi

# –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
log "üìã –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:"

if [ "$ERROR_COUNT" -eq 0 ]; then
    info "üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ."
    EXIT_CODE=0
elif [ "$ERROR_COUNT" -lt 5 ]; then
    warning "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏. –ù–∞–π–¥–µ–Ω–æ $ERROR_COUNT –æ—à–∏–±–æ–∫."
    EXIT_CODE=1
else
    error "‚ùå –°–∏—Å—Ç–µ–º–∞ –∏–º–µ–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –ù–∞–π–¥–µ–Ω–æ $ERROR_COUNT –æ—à–∏–±–æ–∫."
    EXIT_CODE=2
fi

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
log "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
if [ "$ERROR_COUNT" -gt 0 ]; then
    echo "  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose logs -f [service_name]"
    echo "  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: docker-compose restart [service_name]"
    echo "  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ .env —Ñ–∞–π–ª–µ"
fi

if [ "$USAGE" -gt 80 ]; then
    echo "  - –û—á–∏—Å—Ç–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker –æ–±—Ä–∞–∑—ã: docker system prune -a"
    echo "  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Ä–∞–∑–º–µ—Ä: docker-compose logs --tail=1000 | wc -c"
fi

echo "  - –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: $0 $ENVIRONMENT"
echo "  - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã"

log "üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º: $EXIT_CODE"
exit $EXIT_CODE
