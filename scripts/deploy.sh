#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è ducksnet
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -eq 0 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <environment> [options]"
    echo "Environments:"
    echo "  production  - –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä"
    echo "  staging     - –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä"
    echo ""
    echo "Options:"
    echo "  --force     - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞"
    echo "  --no-cache  - –ë–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞ Docker"
    echo "  --backup    - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º"
    exit 1
fi

ENVIRONMENT=$1
shift

# –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø—Ü–∏–π
FORCE_BUILD=false
NO_CACHE=false
CREATE_BACKUP=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --force)
            FORCE_BUILD=true
            shift
            ;;
        --no-cache)
            NO_CACHE=true
            shift
            ;;
        --backup)
            CREATE_BACKUP=true
            shift
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            exit 1
            ;;
    esac
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ "$ENVIRONMENT" != "production" ] && [ "$ENVIRONMENT" != "staging" ]; then
    error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
    exit 1
fi

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_DIR="/opt/ducksnet"
if [ "$ENVIRONMENT" = "staging" ]; then
    PROJECT_DIR="/opt/ducksnet-staging"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -d "$PROJECT_DIR" ]; then
    error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $PROJECT_DIR"
    exit 1
fi

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$PROJECT_DIR"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
if [ "$CREATE_BACKUP" = true ]; then
    log "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."
    BACKUP_DIR="$PROJECT_DIR/backups"
    mkdir -p "$BACKUP_DIR"
    
    BACKUP_FILE="$BACKUP_DIR/backup_$(date +%Y%m%d_%H%M%S).tar.gz"
    
    # –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if docker-compose exec -T bot test -f /app/db/database.db 2>/dev/null; then
        docker-compose exec -T bot cp /app/db/database.db /tmp/database.db
        docker cp "$(docker-compose ps -q bot):/tmp/database.db" /tmp/database.db
        tar -czf "$BACKUP_FILE" -C /tmp database.db 2>/dev/null || true
        rm -f /tmp/database.db
    fi
    
    # –ë—ç–∫–∞–ø .env —Ñ–∞–π–ª–∞
    if [ -f .env ]; then
        tar -czf "$BACKUP_FILE" .env 2>/dev/null || true
    fi
    
    log "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $BACKUP_FILE"
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
log "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose down || true

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
log "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker system prune -f

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
log "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞..."
git fetch origin
git reset --hard origin/main

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
if [ -f .env.backup ]; then
    log "‚öôÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
    cp .env.backup .env
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π —Å–±–æ—Ä–∫–∏
BUILD_OPTS=""
if [ "$FORCE_BUILD" = true ]; then
    BUILD_OPTS="$BUILD_OPTS --force-recreate"
fi

if [ "$NO_CACHE" = true ]; then
    BUILD_OPTS="$BUILD_OPTS --no-cache"
fi

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
log "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose up -d --build $BUILD_OPTS

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
log "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
if docker-compose exec -T bot curl -f http://localhost:8080/health 2>/dev/null; then
    log "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    warning "‚ö†Ô∏è –ë–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
if docker-compose exec -T redis redis-cli --raw incr ping 2>/dev/null > /dev/null; then
    log "‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    warning "‚ö†Ô∏è Redis –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Traefik
if docker-compose exec -T traefik traefik version 2>/dev/null; then
    log "‚úÖ Traefik —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    warning "‚ö†Ô∏è Traefik –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤"
fi

# –û—á–∏—Å—Ç–∫–∞
log "üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."
docker system prune -f

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
log "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–ø–ª–æ—è:"
echo "  - –û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
echo "  - –í—Ä–µ–º—è –¥–µ–ø–ª–æ—è: $(date)"
echo "  - –ö–æ–º–º–∏—Ç: $(git rev-parse --short HEAD)"
echo "  - –í–µ—Ç–∫–∞: $(git branch --show-current)"

log "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
log "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: https://$(grep BOT_DOMAIN .env | cut -d'=' -f2)"
log "üìä Traefik Dashboard: https://traefik.$(grep BOT_DOMAIN .env | cut -d'=' -f2)"

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
    log "üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram..."
    curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -d "chat_id=$TELEGRAM_CHAT_ID" \
        -d "text=üöÄ ducksnet —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –≤ $ENVIRONMENT!%0A‚úÖ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç%0Aüåê –î–æ–º–µ–Ω: $(grep BOT_DOMAIN .env | cut -d'=' -f2)" \
        -d "parse_mode=HTML" > /dev/null 2>&1 || warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
fi
